---
import Base from "../../../layouts/Base.astro";
import PurpurBuild from "../../../util/PurpurBuild";
import {Astro} from "astro/env";
import {marked} from "marked";

const title = 'Download - Your minecraft, your way';
const description = 'Download - Your minecraft - your way.';
const permalink = Astro.site.href;
const version = Astro.params.version;
const current = 'download';

let latestVersion = null;
const allVersions: string[] = [];
let latestBuild = null;
const builds: PurpurBuild[] = [];

let knownRCEVersion = false;

const versionRequestResult = await fetch("https://api.purpurmc.org/v2/purpur")
  .catch(() => {
    console.error("Failed to fetch Purpur versions");
    return null;
  });
if (versionRequestResult === null) {
  console.error("Failed to fetch Purpur versions");
  return new Response("Failed to fetch Purpur versions", {status: 502});
}

const versions = await versionRequestResult.json().catch(() => {
  console.error("Failed to parse Purpur versions");
  return null;
});

if (versions === null || Array.isArray(versions.versions) === false) {
  console.error("Failed to parse Purpur versions");
  return new Response("Failed to parse Purpur versions", {status: 502});
}

for (const version of versions.versions) {
  allVersions.push(version);
}

if (!allVersions.includes(version)) {
  return new Response(`There are no Purpur builds for version ${version}`, {status: 404});
}

latestVersion = allVersions[allVersions.length - 1];

if (version === latestVersion) {
  return Astro.redirect("/download/purpur/");
}

const versionSplit = version.split(".");
if (versionSplit.length >2 && versionSplit[0] === "1" && Number.parseInt(versionSplit[1]) <= 17 ) {
  knownRCEVersion = true;
}

const result = await fetch(`https://api.purpurmc.org/v2/purpur/${version}?detailed=true`)
  .catch(() => {
    return null;
  });
if (result !== null) {
  const json = await result.json();
  latestBuild = new PurpurBuild(json.builds.latest);
  for (const build of json.builds.all) {
    try {
      builds.push(new PurpurBuild(build));
    } catch (e) {
      console.error("Failed to parse build", e);
    }
  }
  builds.reverse();
}
---
<Base title={title} description={description} permalink={permalink} current={current}>
  <div>
    <h1>Purpur</h1>
    <h2>Downloads</h2>
    <p style="text-align: center;" id="versionDisplay">{version}</p>
  </div>

  <section class="downloads">
    <div class="warning">
      <p>
        You are trying to download outdated builds. You will NOT receive support for them. To get the latest build click
        <a href="/download/purpur/">here</a>.
      </p>
      {
        knownRCEVersion
          ? <p>
              This version is known to contain an RCE vulnerability!<br>
              <a href="https://purpurmc.org/docs/Log4j/">Read about the exploit and potential mitigations here</a>
          </p>
          : null
      }
    </div>
    <div class="version-list">
      <h3>Legacy builds</h3>
      <div id="previous" class="version-list">
        {
          builds.map(build => (
              <article class="entry">
                <div class="key">
                  <a href={`https://api.purpurmc.org/v2/purpur/${build.version}/${build.build}/download`}>
                    <button><img src="/images/download.svg" alt aria-hidden="true"><span>{build.build}</span></button>
                  </a>
                  <span class="date" data-timestamp={build.timestamp}></span>
                </div>
                <ul aria-label="changelog">
                  {
                    build.commits.length > 0
                      ? build.commits.map(commit => <li>{commit.description}</li>) : <li>No changes</li>
                  }
                </ul>
              </article>
          ))
        }
      </div>
    </div>
  </section>
  <template id="entry">
    <article class="entry">
      <div class="key">
        <a data-download>
          <button><img src="/images/download.svg" alt="" aria-hidden="true"><span data-version></span></button>
        </a>
        <span class="date" data-date></span>
      </div>
      <div data-changelog aria-label="changelog"></div>
    </article>
  </template>
</Base>

<script>
  const dateFormat = new Intl.DateTimeFormat(navigator.language, {
    year: '2-digit',
    month: '2-digit',
    day: '2-digit',
    hour: '2-digit',
    minute: '2-digit',
    hour12: false,
  });

  document.addEventListener('astro:page-load', async (e) => {
    // don't try to re-fetch data on any other page
    if (!e.target.location.pathname.startsWith("/download/purpur/")) return;
    const times = document.querySelectorAll('[data-timestamp]');
    for (const time of times) {
      const dataTimestamp = time.getAttribute('data-timestamp');
      const timestamp = parseInt(dataTimestamp);
      if (isNaN(timestamp)) continue;
      const date = new Date(timestamp);
      time.textContent = dateFormat.format(date);
    }
  });


</script>

<style lang="scss">
  h1, h2 {
    text-align: center;
  }

  .downloads {
    display: flex;
    justify-content: flex-start;
    flex-direction: column;
    align-items: start;
    min-height: 30rem;
    gap: 3rem;
    .warning {
      font-size: 1.3rem;
      display: flex;
      flex-direction: column;
      justify-content: center;
      align-items: center;
      width: 100%;
      background-color: rgba(255, 0, 0, 0.45);
      padding: 1rem;
      border-radius: 0.5rem;
      color: white;
      margin: 0 auto;
      gap: 2rem;
    }
  }

  .version-list {
    display: flex;
    flex-direction: column;
    width: 100%;

    &.latest {
      h3 {
        font-size: 2rem;
      }
    }
  }

  .entry {
    display: flex;
    position: relative;
    justify-content: flex-start;
    align-items: start;
    padding: 1rem;
    margin: 0.5rem;
    gap: 2rem;
    width: 100%;

    .key {
      display: flex;
      flex-direction: column;
      justify-content: start;
      align-items: center;
      min-height: 3.5rem;
      min-width: 6rem;

      .date {
        font-size: 0.7rem;
      }
    }

    &:not(:last-child) {
      border-bottom: 1px solid rgba(255, 255, 255, 0.3);
    }

    a {
      text-decoration: none;
    }

    .changelog {
      display: flex;
      flex: 1;
      min-width: min(20rem, 100%);
    }

  }

  @media (max-width: 940px) {
    .entry {
      flex-direction: column;
      gap: 0.2rem;
    }
  }

</style>
