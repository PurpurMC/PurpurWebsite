---
export const prerender = false;

import sharp from "sharp";

// TODO: use image found locally at `images/sig.png` instead of fetching
const sigImageResponse = await fetch("https://purpurmc.org/images/sig.png")
    .catch(() => {
        return null;
    });

// TODO: use data locally instead of fetching
const statsHit = async () => await fetch("https://purpurmc.org/stats/data/data.json")
    .catch(() => {
        return null;
    });

let statsDataResponse = await statsHit();
let dataJson = await statsDataResponse.json();

const now = Math.floor(new Date().getTime() / 1000);
const next = dataJson['next'];

// check if data needs updating (only once a day)
if (now > next) {
    // hit stats page so it can update data
    await fetch("https://purpurmc.org/stats/")
        .catch(() => {
            return null;
        });

    // get data again
    statsDataResponse = await statsHit();
    dataJson = await statsDataResponse.json();
}

const servers = dataJson['data']['servers']['purpur'];
const players = dataJson['data']['players']['purpur'];

// TODO: early return if no data

const text = `Servers: ${servers[servers.length - 1]} Players: ${players[players.length - 1]}`;

const modifiedImage = sharp(await sigImageResponse.arrayBuffer())
const metadata = await modifiedImage.metadata();

const topLeftX = 270;
const topLeftY = 88;
const bottomGap = 2;

const textImage = sharp({
    text: {
        text: `<span foreground="white">${text}</span>`,
        // TODO: figure out a good font to use
        // font: 'Arial',
        width: metadata.width - topLeftX,
        height: metadata.height - topLeftY - bottomGap,
        rgba: true,
    }
}).extend({
    left: topLeftX,
    top: topLeftY,
    bottom: bottomGap,
    background: "#00000000"
});

modifiedImage.composite([{
    input: await textImage.png().toBuffer(),
}]);

return new Response(await modifiedImage.toBuffer(), {
    headers: {
        'Content-Type': 'image/png',
    }
});

---
